{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["jpeg","require","myWorker","Worker","fixPixel","v","Math","round","max","min","drawImage","obj","a","mul","text","height","width","data","container","document","createElement","canvas","context","getContext","imageData","ImageData","buffer","Uint8ClampedArray","iAdd","length","i","y","x","pos","set","putImageData","style","transform","transformOrigin","innerHTML","appendChild","querySelector","onmessage","e","console","log","App","upload","file","target","files","reader","FileReader","onload","event","buf","result","pixels","decode","postMessage","onerror","err","error","readAsArrayBuffer","className","type","onChange","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"wQAEMA,EAAOC,EAAQ,IAEfC,EAAW,IAAIC,OAAO,aAO5B,SAASC,EAASC,GAId,OAHAA,EAAIC,KAAKC,MAAMF,GACfA,EAAIC,KAAKE,IAAI,EAAGH,GAChBA,EAAIC,KAAKG,IAAIJ,EAAG,K,SAKLK,E,8EAAf,WAAyBC,GAAzB,uDAAAC,EAAA,sDAkBI,IAlB0BC,EAA9B,gCAAyCC,EAAzC,+BAA8C,GACpCC,EAASJ,EAAII,OACbC,EAAQL,EAAIK,MACZC,EAAON,EAAIM,KAEXC,EAAYC,SAASC,cAAc,QAEnCC,EAASF,SAASC,cAAc,WAC/BJ,MAAQA,EACfK,EAAON,OAASA,EACVO,EAAUD,EAAOE,WAAW,MAC5BC,EAAY,IAAIC,UAAUT,EAAOD,GACjCW,EAAS,IAAIC,kBAAkBX,EAAQD,EAAS,GAClDa,EAAO,EACPX,EAAKY,SAAWb,EAAQD,EAAS,IACjCa,EAAO,GAEPE,EAAI,EACAC,EAAI,EAAGA,EAAIhB,EAAQgB,IACvB,IAAQC,EAAI,EAAGA,EAAIhB,EAAOgB,IAEtBN,GADMO,EAAwB,GAAjBF,EAAIf,EAAQgB,IACZ,GAAK5B,EAASa,EAAKa,EAAI,IACpCJ,EAAOO,EAAM,GAAK7B,EAASa,EAAKa,EAAI,IACpCJ,EAAOO,EAAM,GAAK7B,EAASa,EAAKa,EAAI,IACpCJ,EAAOO,EAAM,GAAK,IAClBH,GAAKF,EAGbJ,EAAUP,KAAKiB,IAAIR,GACnBJ,EAAQa,aAAaX,EAAW,EAAG,GAC/BX,IACAK,EAAUkB,MAAMpB,MAAhB,UAAmC,EAARA,EAA3B,MACAE,EAAUkB,MAAMrB,OAAhB,UAAqC,EAATA,EAA5B,MACAM,EAAOe,MAAMC,UAAY,WACzBhB,EAAOe,MAAME,gBAAkB,WAEnCpB,EAAUqB,UAAV,aAA4BzB,EAA5B,QACAI,EAAUsB,YAAYnB,GACtBF,SAASsB,cAAc,QAAQD,YAAYtB,GAtC/C,6C,sBAdAhB,EAASwC,UAAY,SAACC,GAClBC,QAAQC,IAAI,+BAAgCF,EAAE1B,MAC9CP,EAAUiC,EAAE1B,MAAM,EAAO,2B,IAkFd6B,E,4MA1BXC,OAAS,SAACJ,GACN,IAAMK,EAAOL,EAAEM,OAAOC,MAAM,GACtBC,EAAS,IAAIC,WACnBD,EAAOE,OAAP,uCAAgB,WAAOC,GAAP,iBAAA1C,EAAA,sDACN2C,EAAMD,EAAML,OAAOO,OACnBC,EAASzD,EAAK0D,OAAOH,GAAK,GAChCX,QAAQC,IAAIY,GACZ/C,EAAU+C,GAAQ,EAAM,kBACxBvD,EAASyD,YAAYF,GALT,2CAAhB,sDAOAN,EAAOS,QAAU,SAACC,GACdjB,QAAQkB,MAAMD,IAElBV,EAAOY,kBAAkBf,I,uDAIzB,OACI,yBAAKgB,UAAU,OACX,kCACA,2BAAOC,KAAK,OAAOC,SAAUC,KAAKpB,c,GAtBhCqB,IAAMC,WCjDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1D,SAAS2D,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvB,GACLlB,QAAQkB,MAAMA,EAAMwB,c","file":"static/js/main.157e77c0.chunk.js","sourcesContent":["import React from 'react'\n\nconst jpeg = require('jpeg-js')\n\nconst myWorker = new Worker('worker.js')\nmyWorker.onmessage = (e) => {\n    console.log('Message received from worker', e.data)\n    drawImage(e.data, false, 'Super Resolution Image')\n}\n\n\nfunction fixPixel(v) {\n    v = Math.round(v)\n    v = Math.max(0, v)\n    v = Math.min(v, 255)\n    return v\n}\n\n\nasync function drawImage(obj, mul=false, text='') {\n    const height = obj.height\n    const width = obj.width\n    const data = obj.data\n\n    const container = document.createElement('div')\n\n    const canvas = document.createElement('canvas')\n    canvas.width = width\n    canvas.height = height\n    const context = canvas.getContext('2d')\n    const imageData = new ImageData(width, height)\n    const buffer = new Uint8ClampedArray(width * height * 4)\n    let iAdd = 3\n    if (data.length === width * height * 4) {\n        iAdd = 4\n    }\n    let i = 0\n    for(let y = 0; y < height; y++) {\n        for(let x = 0; x < width; x++) {\n            const pos = (y * width + x) * 4\n            buffer[pos + 0] = fixPixel(data[i + 0])\n            buffer[pos + 1] = fixPixel(data[i + 1])\n            buffer[pos + 2] = fixPixel(data[i + 2])\n            buffer[pos + 3] = 255\n            i += iAdd\n        }\n    }\n    imageData.data.set(buffer)\n    context.putImageData(imageData, 0, 0)\n    if (mul) {\n        container.style.width = `${width * 2}px`\n        container.style.height = `${height * 2}px`\n        canvas.style.transform = 'scale(2)'\n        canvas.style.transformOrigin = '0px 0px'\n    }\n    container.innerHTML = `<p>${text}</p>`\n    container.appendChild(canvas)\n    document.querySelector('body').appendChild(container)\n}\n\n\nclass App extends React.Component {\n\n    upload = (e) => {\n        const file = e.target.files[0]\n        const reader = new FileReader()\n        reader.onload = async (event) => {\n            const buf = event.target.result\n            const pixels = jpeg.decode(buf, true)\n            console.log(pixels)\n            drawImage(pixels, true, 'Original Image')\n            myWorker.postMessage(pixels)\n        }\n        reader.onerror = (err) => {\n            console.error(err)\n        }\n        reader.readAsArrayBuffer(file)\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h3>X2</h3>\n                <input type='file' onChange={this.upload} />\n            </div>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}