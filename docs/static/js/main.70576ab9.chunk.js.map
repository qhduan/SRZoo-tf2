{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["tf","require","jpeg","model","a","loadGraphModel","console","log","loadModel","imageByteArray","image","numChannels","pixels","data","numPixels","width","height","values","Int32Array","i","channel","imageToInput","outShape","input","tensor4d","fixPixel","v","Math","round","max","min","drawImage","tensor","mul","shape","canvas2","document","createElement","context2","getContext","imageData","ImageData","buffer","Uint8ClampedArray","dataSync","y","x","pos","set","putImageData","style","transform","transformOrigin","querySelector","appendChild","App","upload","e","file","target","files","reader","FileReader","onload","event","buf","result","decode","pixel_max_one","channel_first","transpose","div","executeAsync","out","onerror","err","error","readAsArrayBuffer","className","type","onChange","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.70576ab9.chunk.js","sourcesContent":["import React from 'react'\n\nconst tf = require('@tensorflow/tfjs')\nconst jpeg = require('jpeg-js')\n\nlet model = null\n\nasync function loadModel() {\n    model = await tf.loadGraphModel('carn_x2_js/model.json')\n    console.log('model loaded')\n}\n\nloadModel()\n\nconst imageByteArray = async (image, numChannels) => {\n    const pixels = image.data\n    const numPixels = image.width * image.height;\n    const values = new Int32Array(numPixels * numChannels);\n\n    for (let i = 0; i < numPixels; i++) {\n        for (let channel = 0; channel < numChannels; ++channel) {\n            values[i * numChannels + channel] = pixels[i * 4 + channel];\n        }\n    }\n\n    return values\n}\n\nconst imageToInput = async (image, numChannels) => {\n    const values = await imageByteArray(image, numChannels)\n    const outShape = [1, image.height, image.width, numChannels]\n    const input = tf.tensor4d(values, outShape, 'float32')\n\n    return input\n}\n\n\nfunction fixPixel(v) {\n    v = Math.round(v)\n    v = Math.max(0, v)\n    v = Math.min(v, 255)\n    return v\n}\n\n\nasync function drawImage(tensor, mul=false) {\n    const height = tensor.shape[1]\n    const width = tensor.shape[2]\n    var canvas2 = document.createElement('canvas');\n    canvas2.width = width;\n    canvas2.height = height;\n    var context2 = canvas2.getContext('2d');\n    const imageData = new ImageData(width, height);\n    const buffer = new Uint8ClampedArray(width * height * 4)\n    const data = tensor.dataSync();\n    var i = 0;\n    for(var y = 0; y < height; y++) {\n        for(var x = 0; x < width; x++) {\n            var pos = (y * width + x) * 4;\n            buffer[pos + 0] = fixPixel(data[i])\n            buffer[pos + 1] = fixPixel(data[i + 1])\n            buffer[pos + 2] = fixPixel(data[i + 2])\n            buffer[pos + 3] = 255\n            i += 3\n        }\n    }\n    imageData.data.set(buffer)\n    context2.putImageData(imageData, 0, 0)\n    if (mul) {\n        canvas2.style.transform = 'scale(2)'\n        canvas2.style.transformOrigin = '0'\n    }\n    document.querySelector('body').appendChild(canvas2)\n}\n\n\nclass App extends React.Component {\n\n    upload = (e) => {\n        const file = e.target.files[0];\n\n        const reader = new FileReader();\n\n        reader.onload = async (event) => {\n            const buf = event.target.result\n            const pixels = jpeg.decode(buf, true)\n            console.log(pixels)\n            let input = await imageToInput(pixels, 3)\n            console.log(input)\n\n            console.log('Draw Original')\n            drawImage(input, true)\n\n            // carn setting\n            let pixel_max_one = true\n            let channel_first = true\n\n            if (channel_first) {\n                input = await tf.transpose(input, [0, 3, 1, 2])\n            }\n            if (pixel_max_one) {\n                input = tf.div(input, 255.0)\n            }\n    \n            let out = await model.executeAsync(input)\n\n            if (channel_first) {\n                out = tf.transpose(out, [0, 2, 3, 1])\n            }\n            if (pixel_max_one) {\n                out = tf.mul(out, 255.0)\n            }\n\n            console.log('Draw Better')\n            drawImage(out)\n        };\n\n        reader.onerror = (err) => {\n            console.error(err);\n        };\n\n        reader.readAsArrayBuffer(file);\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h3>X2</h3>\n                <input type='file' onChange={this.upload} />\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}